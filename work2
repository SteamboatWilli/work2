// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

library StringComparer {
  function compare(string memory str1, string memory str2) public pure returns (bool) {
    return keccak256(abi.encodePacked(str1)) == keccak256(abi.encodePacked(str2));
  }
}
library StringComparer2 {
  function compare(string memory str1, string memory str2,string memory str3) public pure returns (bool) {
    return keccak256(abi.encodePacked(str1)) == keccak256(abi.encodePacked(str2)) ||
    keccak256(abi.encodePacked(str1)) == keccak256(abi.encodePacked(str3));
  }
}

interface living  {
    function eat (string memory food) external returns (string memory);
    
}

contract HasName{
    string internal _name;
    constructor (string memory name){
        _name = name;
    }
}

abstract contract Animal is living{
    function eat (string memory food) pure virtual public returns (string memory){
        return string.concat(
            "Enimal eats", food
        );
    }
    function sleap () pure virtual public returns (string memory){
        return "Zzzzz.....";
    }
    function speak () pure virtual public returns (string memory){
        return ".......";
    }
}

abstract contract Herbivore is Animal, HasName{
    string constant PLANT = "plant";
    modifier eatOnlyPlant (string memory food){
        require(StringComparer.compare(food, PLANT), "Can only eat plant food");
        _;
    }

    function eat(string memory food) pure virtual override  public eatOnlyPlant(food) returns(string memory){
        return super.eat(food);
    }

}

abstract contract MeatEat is Animal, HasName{
    string constant MEAT = "meat";
    modifier eatOnlyMeat (string memory food){
        require(StringComparer.compare(food, MEAT), "Can only eat meat food");
        _;
    }

    function eat(string memory food) pure virtual override  public eatOnlyMeat(food) returns(string memory){
        return super.eat(food);
    }

}

abstract contract AllEat is Animal, HasName{
    string constant MEAT = "meat";
    string constant PLANT = "plant";
    string constant CHOCOLATE = "chocolate";
    modifier eatOnlyAll (string memory food){
        require(StringComparer2.compare(food, MEAT, PLANT), "Can only food, chocolate is bad");
        _;
    }

    function eat(string memory food) pure virtual override  public eatOnlyAll(food) returns(string memory){
        return super.eat(food);
    }

}

contract Cow is Herbivore {
  constructor(string memory name) HasName(name) {
  }

  function speak() pure override public returns (string memory) {
    return "Mooo";
  }
}

contract Horse is Herbivore {
  constructor(string memory name) HasName(name) {
  }

  function speak() pure override public returns (string memory) {
    return "Igogo";
  }
}

contract Woolf is MeatEat {
  constructor(string memory name) HasName(name) {
  }

  function speak() pure override public returns (string memory) {
    return "Awoo";
  }
}

contract Dog is AllEat {
  constructor(string memory name) HasName(name) {
  }

  function speak() pure override public returns (string memory) {
    return "Woof";
  }
}

contract Farmer {
  function feed(address animal, string memory food) pure public returns (string memory) {
    return Animal(animal).eat(food);
  }

  function call(address animal) pure public returns (string memory){
    return Animal(animal).speak();
  }
}
